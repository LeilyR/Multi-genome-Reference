export LD_LIBRARY_PATH=/ebio/abt6/lrabbani/programs/graph/src
/ebio/abt6/lrabbani/programs/graph/src/graph simple_model simpl_test.fasta simple_test.maf graph.maf noencode
loaded 3 sequences
Loaded: 3 sequences and 5 pairwise alignments 
3 self alignments were skipped
5 alternative alignments of identical regions were skipped
 base cost 5
 create 2 96.3802 m1 0.750017
 create 1 96.3802 m2 0.750017
 create 2 92.7291 m1 0.719776
 create 1 92.7291 m2 0.719776
 create 2 885.706 m1 22.9602
 create 1 885.102 m2 22.3333
 create 2 792.373 m1 5.97843
 create 1 792.373 m2 5.97843
 create 2 792.977 m1 22.2404
 create 1 792.373 m2 21.6135
 on a graph with 5 nodes and 6 edges
 create 2 885.706 m1 22.9602
 create 1 885.102 m2 22.3333
 create 2 792.373 m1 5.97843
 create 1 792.373 m2 5.97843
 create 2 792.977 m1 22.2404
 create 1 792.373 m2 21.6135
 create 2 96.3802 m1 0.750017
 create 1 96.3802 m2 0.750017
 create 2 92.7291 m1 0.719776
 create 1 92.7291 m2 0.719776
 remove: 4 now removed: 1
orig weight 87.0093 clarkson weight 43.5047
 size 4
 num edges now 8
 remove: 3 now removed: 2
orig weight 90.6302 clarkson weight 47.1255
 size 3
 num edges now 6
 remove: 2 now removed: 3
orig weight 765.748 clarkson weight 382.874
 size 2
 num edges now 2
 remove: 0 now removed: 4
orig weight 857.757 clarkson weight 384.253
 size 1
 num edges now 0
 keep 1 weight 781.394 degree 0
 on 5 alignments with total gain of 2582.54
 found an INDEPENDENT SET of 1 alignments with total gain 781.394
 remainder contains 4 alignments with total gain of 1801.14
 start recursive lazy insert tree on 
al1 seq 0 b 50 e 449 l 400
al2 seq 1 b 150 e 549

 create 2 792.373 m1 5.97843
 create 1 792.373 m2 5.97843
initial: level 0 positive gain: 781.394 split res rem 0 ins 1
 create 2 792.373 m1 5.97843
 create 1 792.373 m2 5.97843
splits: level 0 on al length 400 gain 781.394 causes to remove 0 alignments with 0 gain. We could insert 1 small pieces. Upper bound of gain is 781.394
 full insert step on level 0
 create 2 792.373 m1 5.97843
 create 1 792.373 m2 5.97843
full insert: 0 on al length 400 finally inserted pieces: 1 real local gain 781.394
 create 2 792.373 m1 5.97843
 create 1 792.373 m2 5.97843
 create 2 792.373 m1 5.97843
 create 1 792.373 m2 5.97843
 alignment taken 
 on alignment 0 length 400 gain 781.394 recursive lazy split insert results:
 al 0 gain in 781.394 gain out 781.394 check gain (ins - rem) 781.394
 out: 0 gain 0 in: 1 gain 781.394
 total gain until here: 781.394 needed 1 recursive lazy split insert calls 
 start recursive lazy insert tree on 
al1 seq 0 b 2 e 449 l 448
al2 seq 2 b 2 e 449

 create 2 885.706 m1 22.9602
 create 1 885.102 m2 22.3333
initial: level 0 positive gain: 857.757 split res rem 0 ins 2
 create 2 92.7291 m1 0.719776
 create 1 92.7291 m2 0.719776
 create 2 792.977 m1 22.2404
 create 1 792.373 m2 21.6135
splits: level 0 on al length 448 gain 857.757 causes to remove 0 alignments with 0 gain. We could insert 2 small pieces. Upper bound of gain is 852.757
 before recursion, we have removed 0 alignments with gain 0 upper bound of gain is 852.757
start recursion: level 0 start rec 0 on al length 400
 create 2 792.977 m1 22.2404
 create 1 792.373 m2 21.6135
initial: level 1 positive gain: 765.748 split res rem 0 ins 1
 create 2 792.977 m1 22.2404
 create 1 792.373 m2 21.6135
splits: level 1 on al length 400 gain 765.748 causes to remove 0 alignments with 0 gain. We could insert 1 small pieces. Upper bound of gain is 765.748
 full insert step on level 1
 create 2 792.977 m1 22.2404
 create 1 792.373 m2 21.6135
full insert: 1 on al length 400 finally inserted pieces: 1 real local gain 765.748
end recursion: level 0 end rec 0 on al length 400 subtree local gain 765.748 ub was 765.748 lost gain is 0 total lost gain is 0 total gain of this level until now: 765.748 ub is 852.757
start recursion: level 0 start rec 1 on al length 48
 create 2 92.7291 m1 0.719776
 create 1 92.7291 m2 0.719776
initial: level 1 positive gain: 87.0093 split res rem 0 ins 1
 create 2 92.7291 m1 0.719776
 create 1 92.7291 m2 0.719776
splits: level 1 on al length 48 gain 87.0093 causes to remove 0 alignments with 0 gain. We could insert 1 small pieces. Upper bound of gain is 87.0093
 full insert step on level 1
 create 2 92.7291 m1 0.719776
 create 1 92.7291 m2 0.719776
full insert: 1 on al length 48 finally inserted pieces: 1 real local gain 87.0093
end recursion: level 0 end rec 1 on al length 48 subtree local gain 87.0093 ub was 87.0093 lost gain is 0 total lost gain is 0 total gain of this level until now: 852.757 ub is 852.757
take subtree: level 0 on al length 448 gain 857.757 causes to remove 0 alignments with 0 gain. We want to insert 2 small pieces. TOTAL gain is 852.757
 create 2 885.706 m1 22.9602
 create 1 885.102 m2 22.3333
 create 2 92.7291 m1 0.719776
 create 1 92.7291 m2 0.719776
 create 2 792.977 m1 22.2404
 create 1 792.373 m2 21.6135
 alignment taken 
 on alignment 1 length 448 gain 765.748 recursive lazy split insert results:
 al 1 gain in 765.748 gain out 852.757 check gain (ins - rem) 852.757
 out: 0 gain 0 in: 2 gain 852.757
 total gain until here: 1634.15 needed 3 recursive lazy split insert calls 
 start recursive lazy insert tree on 
al1 seq 1 b 150 e 549 l 400
al2 seq 2 b 50 e 449

 create 2 792.977 m1 22.2404
 create 1 792.373 m2 21.6135
initial: level 0 positive gain: 765.748 split res rem 0 ins 1
 create 2 792.977 m1 22.2404
 create 1 792.373 m2 21.6135
splits: level 0 on al length 400 gain 765.748 causes to remove 0 alignments with 0 gain. We could insert 1 small pieces. Upper bound of gain is 765.748
 full insert step on level 0
 create 2 792.977 m1 22.2404
 create 1 792.373 m2 21.6135
full insert: 0 on al length 400 finally inserted pieces: 1 real local gain 765.748
 create 2 792.977 m1 22.2404
 create 1 792.373 m2 21.6135
 create 2 792.977 m1 22.2404
 create 1 792.373 m2 21.6135
 alignment taken 
 on alignment 2 length 400 gain 765.748 recursive lazy split insert results:
 al 2 gain in 765.748 gain out 765.748 check gain (ins - rem) 765.748
 out: 0 gain 0 in: 1 gain 765.748
 total gain until here: 2399.9 needed 1 recursive lazy split insert calls 
 start recursive lazy insert tree on 
al1 seq 0 b 0 e 49 l 50
al2 seq 1 b 0 e 49

 create 2 96.3802 m1 0.750017
 create 1 96.3802 m2 0.750017
initial: level 0 positive gain: 90.6302 split res rem 0 ins 1
 create 2 3.65108 m1 0.0302413
 create 1 3.65108 m2 0.0302413
splits: level 0 on al length 50 gain 90.6302 causes to remove 0 alignments with 0 gain. We could insert 0 small pieces. Upper bound of gain is 0
 create 2 96.3802 m1 0.750017
 create 1 96.3802 m2 0.750017
 alignment not taken 
 on alignment 3 length 50 gain 90.6302 recursive lazy split insert results:
 al 3 gain in 90.6302 gain out 0 check gain (ins - rem) 0
 out: 0 gain 0 in: 0 gain 0
 total gain until here: 2399.9 needed 1 recursive lazy split insert calls 
 start recursive lazy insert tree on 
al1 seq 1 b 2 e 49 l 48
al2 seq 2 b 2 e 49

 create 2 92.7291 m1 0.719776
 create 1 92.7291 m2 0.719776
initial: level 0 positive gain: 87.0093 split res rem 0 ins 0
splits: level 0 on al length 48 gain 87.0093 causes to remove 0 alignments with 0 gain. We could insert 0 small pieces. Upper bound of gain is 0
 create 2 92.7291 m1 0.719776
 create 1 92.7291 m2 0.719776
 alignment not taken 
 on alignment 4 length 48 gain 87.0093 recursive lazy split insert results:
 al 4 gain in 87.0093 gain out 0 check gain (ins - rem) 0
 out: 0 gain 0 in: 0 gain 0
 total gain until here: 2399.9 needed 1 recursive lazy split insert calls 
Input size 5 max gain 2582.54
Used 3 alignments with total gain 2399.9 not used: 2
pieces removed: 0 pieces inserted: 4
cc_cluster_in size: 2
cc 0: from 5 original als with total gain 2582.54 we made 4 pieces with total gain 2399.9
 run affpro at 0 on 3
 in al std::set size 3
 nums 0
al1 seq 0 b 50 e 449 l 400
al2 seq 2 b 50 e 449

 create 2 792.977 m1 22.2404
 create 1 792.373 m2 21.6135
c1 792.373 c2 792.977 m1 22.2404 m2 21.6135
 nums 1
al1 seq 0 b 50 e 449 l 400
al2 seq 1 b 150 e 549

 create 2 792.373 m1 5.97843
 create 1 792.373 m2 5.97843
c1 792.373 c2 792.373 m1 5.97843 m2 5.97843
 nums 2
al1 seq 1 b 150 e 549 l 400
al2 seq 2 b 50 e 449

 create 2 792.977 m1 22.2404
 create 1 792.373 m2 21.6135
c1 792.373 c2 792.977 m1 22.2404 m2 21.6135
 create 2 792.977 m1 22.2404
 create 1 792.373 m2 21.6135
 create 2 792.373 m1 5.97843
 create 1 792.373 m2 5.97843
 create 2 792.977 m1 22.2404
 create 1 792.373 m2 21.6135
center 0:50
center 1:150
center 2:50
 run affpro at 1 on 1
 in al std::set size 1
 nums 0
al1 seq 0 b 2 e 49 l 48
al2 seq 2 b 2 e 49

 create 2 92.7291 m1 0.719776
 create 1 92.7291 m2 0.719776
c1 92.7291 c2 92.7291 m1 0.719776 m2 0.719776
 create 2 92.7291 m1 0.719776
 create 1 92.7291 m2 0.719776
center 0:2
center 2:2
